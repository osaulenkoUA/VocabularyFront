{"version":3,"sources":["redux/Vocabulary/vocabularyOperation.ts","components/assets/Svg/IconClose.module.scss","components/VocabularyItem/VocabularyItem.module.scss","components/VocabularyList/VocabularyList.module.scss","components/FilterVocabulary/FilterVocabulary.module.scss","components/VocabularyForm/VocabularyForm.module.scss","views/VocabularyView/VocabularyView.module.css","helpers/createArray.js","components/assets/Svg/IconClose.tsx","components/VocabularyItem/VocabularyItem.tsx","components/VocabularyList/VocabularyList.tsx","components/FilterVocabulary/FilterVocabulary.tsx","components/VocabularyForm/VocabularyForm.tsx","views/VocabularyView/VocabularyView.tsx"],"names":["axios","defaults","baseURL","postWord","word","translate","dispatch","a","vocabularyActions","addWordRequest","post","data","addWordSuccess","addWordError","fetchWords","fetchWordsRequest","get","reverse","fetchWordsSuccess","fetchWordsError","removeWord","id","removeWordRequest","delete","removeWordSuccess","error","removeWordError","module","exports","twoDimensionalArray","images","innerLengthArray","temporaryArray","map","el","idx","length","push","filter","IconClose","className","s","svgLightTheme","width","height","viewBox","d","VocabularyItem","elem","removeWords","_id","key","list__item","btn_delete","type","onClick","defaultProps","userId","SwiperCore","use","Pagination","EffectFlip","pagination","index","VocabularyList","newList","console","log","effect","grabCursor","spaceBetween","slidesPerView","list","FilterVocabulary","filtred","findWord","filterTitle","onChange","target","value","filterInput","placeholder","VocabularyForm","useState","setWord","setTranslate","onSubmit","e","preventDefault","form","form__input","name","form__btn","VocabularyView","useAppDispatch","isMobile","screen","words","useSelector","vocabularySelectors","getWords","getWordList","createArray","useEffect","vocabularyOperation","isWords","isShowFindWords","isShowWordList","find","toast","CSSTransition","in","timeout","unmountOnExit","classNames","changeFilter"],"mappings":"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","file":"static/js/4.c86f28b3.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {addWord, content} from '../../types/types'\r\nimport vocabularyActions from './vocabularyActions';\r\nimport {AppDispatch} from '../store';\r\n\r\naxios.defaults.baseURL = 'https://sleepy-escarpment-78189.herokuapp.com';\r\n\r\ntype addData = {\r\n    data: content;\r\n}\r\ntype getData = {\r\n    data: content[];\r\n}\r\nconst postWord = ({word, translate}: addWord) => async (dispatch: AppDispatch) => {\r\n    dispatch(vocabularyActions.addWordRequest());\r\n    try {\r\n        const {data}: addData = await axios.post('/vocabulary/addword', {word, translate});\r\n        dispatch(vocabularyActions.addWordSuccess(data));\r\n    } catch (error) {\r\n        dispatch(vocabularyActions.addWordError(error));\r\n    }\r\n};\r\n\r\nconst fetchWords= () => async (dispatch: AppDispatch) => {\r\n    dispatch(vocabularyActions.fetchWordsRequest());\r\n    try {\r\n        const {data}: getData = await axios.get('/vocabulary/words');\r\n        data.reverse();\r\n        dispatch(vocabularyActions.fetchWordsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(vocabularyActions.fetchWordsError(error));\r\n    }\r\n};\r\n\r\nconst removeWord = (id: string) => async (dispatch: AppDispatch) => {\r\n    dispatch(vocabularyActions.removeWordRequest());\r\n    try {\r\n        axios.delete(`/vocabulary/delete/${id}`);\r\n        dispatch(vocabularyActions.removeWordSuccess(id));\r\n    } catch (error) {\r\n        dispatch(vocabularyActions.removeWordError(error));\r\n    }\r\n};\r\n\r\nexport default {\r\n    postWord,\r\n    fetchWords,\r\n    removeWord,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgLightTheme\":\"IconClose_svgLightTheme__3Yapu\",\"svgDarkTheme\":\"IconClose_svgDarkTheme__1fw29\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list__item\":\"VocabularyItem_list__item__1mNF3\",\"btn_delete\":\"VocabularyItem_btn_delete__1iSZR\",\"light\":\"VocabularyItem_light__1aa3m\",\"dark\":\"VocabularyItem_dark__1o_z0\",\"translate\":\"VocabularyItem_translate__17bCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"VocabularyList_list__BqebZ\",\"enter\":\"VocabularyList_enter__h8wAP\",\"enterActive\":\"VocabularyList_enterActive__3ooJ3\",\"exit\":\"VocabularyList_exit__3JMvk\",\"exitActive\":\"VocabularyList_exitActive__2ybwD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findWord\":\"FilterVocabulary_findWord__2026v\",\"filterInput\":\"FilterVocabulary_filterInput__eTRFo\",\"filterTitle\":\"FilterVocabulary_filterTitle__2TjSg\",\"enter\":\"FilterVocabulary_enter__2n8_e\",\"enterActive\":\"FilterVocabulary_enterActive__1Hjgp\",\"exit\":\"FilterVocabulary_exit__feDSZ\",\"exitActive\":\"FilterVocabulary_exitActive__24dW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"VocabularyForm_form__2tlJk\",\"form__input\":\"VocabularyForm_form__input__1fF3A\",\"form__btn\":\"VocabularyForm_form__btn__20_QY\",\"enter\":\"VocabularyForm_enter__1ZtVj\",\"enterActive\":\"VocabularyForm_enterActive__1YlfE\",\"exit\":\"VocabularyForm_exit__3mxYF\",\"exitActive\":\"VocabularyForm_exitActive__2gebx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"VocabularyView_enter__2AQXp\",\"enterActive\":\"VocabularyView_enterActive__1vLi9\",\"exit\":\"VocabularyView_exit__3XPYB\",\"exitActive\":\"VocabularyView_exitActive__3YEhQ\"};","\r\n\r\n//images:  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];  length = 17\r\n// innerLengthArray: 4;\r\n//Output: [ [1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1], [1] ]\r\n\r\n\r\n//images:  [1,1,1,1,1,1,1,1];  length = 8\r\n// innerLengthArray: 2;\r\n//Output: [ [1,1], [1,1], [1,1], [1,1] ]\r\n\r\nconst twoDimensionalArray = (images, innerLengthArray) => {\r\n  let temporaryArray = [];\r\n  const array = images.map((el, idx) => {\r\n    if (temporaryArray.length === innerLengthArray) temporaryArray = [];\r\n    temporaryArray.push(el);\r\n    if (!((idx + 1) % innerLengthArray) || images.length - 1 === idx)\r\n      return temporaryArray;\r\n  });\r\n  //array before filter [undefined,undefined,undefined,undefined,undefined,undefined,[{...},{...},{...}],undefined,undefined....]\r\n  return array.filter((el) => el);\r\n};\r\n\r\n\r\nexport default twoDimensionalArray;","import React from 'react';\r\n\r\nimport s from './IconClose.module.scss';\r\n\r\nconst IconClose = () => {\r\n  return (\r\n    <svg\r\n      className={s.svgLightTheme}\r\n      width=\"25\"\r\n      height=\"25\"\r\n      viewBox=\"0 0 32 32\"\r\n    >\r\n      <title>delete-word</title>\r\n      <path d=\"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13z\"></path>\r\n      <path d=\"M21 8l-5 5-5-5-3 3 5 5-5 5 3 3 5-5 5 5 3-3-5-5 5-5z\"></path>\r\n    </svg>\r\n  );\r\n};\r\n\r\n\r\nexport default IconClose;\r\n","import React, {FC} from 'react';\r\nimport {content} from '../../types/types'\r\n\r\nimport IconClose from '../assets/Svg/IconClose';\r\n\r\nimport s from './VocabularyItem.module.scss';\r\n\r\ntype PropTypes = {\r\n    elem: content;\r\n    removeWords: (_id: string) => void;\r\n    children?: never;\r\n}\r\n\r\nconst VocabularyItem: FC<PropTypes> = ({elem, removeWords}: PropTypes) => {\r\n    const {word, translate, _id} = elem;\r\n    return (\r\n        <div key={word} className={s.list__item}>\r\n            <span>{word}:</span>\r\n            <span className={s.translate}>{translate}</span>\r\n            <button\r\n                className={s.btn_delete}\r\n                type=\"button\"\r\n                onClick={() => removeWords(_id)}\r\n            >\r\n                <IconClose/>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VocabularyItem;\r\n\r\nVocabularyItem.defaultProps = {\r\n    elem: {word:'',translate:'',userId:'',_id:''},\r\n    removeWords: () => {\r\n    }\r\n};","import 'swiper/swiper.scss';\r\nimport \"../../styles/pagination.scss\";\r\nimport \"swiper/components/effect-flip/effect-flip.min.css\";\r\nimport React, {FC, ReactElement} from 'react';\r\nimport SwiperCore, {EffectFlip, Pagination} from 'swiper';\r\nimport {Swiper, SwiperSlide} from 'swiper/react';\r\nimport {content} from '../../types/types'\r\nimport VocabularyItem from '../VocabularyItem/VocabularyItem';\r\nimport s from './VocabularyList.module.scss';\r\n\r\nSwiperCore.use([Pagination, EffectFlip]);\r\nconst pagination = {\r\n    \"clickable\": true,\r\n    \"renderBullet\": function (index: number, className: string): string {\r\n        return '<span class=\\\"' + className + '\\\">' + (index + 1) + '</span>';\r\n    }\r\n}\r\n\r\ntype PropTypes = {\r\n    newList: content[];\r\n    removeWords: (_id: string) => void;\r\n    children?: never;\r\n}\r\n\r\nconst VocabularyList: FC<PropTypes> = ({removeWords, newList}: PropTypes) => {\r\n    console.log(newList[0]);\r\n    return (\r\n        <>\r\n            <Swiper effect={'flip'} grabCursor={true} pagination={pagination} spaceBetween={5} slidesPerView={1}>\r\n                {newList.map((el:any, idx:number): ReactElement => (\r\n                    <SwiperSlide key={idx}>\r\n                        <div className={s.list}>\r\n                            {el.map((elem: content) => (\r\n                                <VocabularyItem elem={elem} removeWords={removeWords}/>\r\n                            ))}\r\n                        </div>\r\n                    </SwiperSlide>\r\n                ))\r\n                }\r\n            </Swiper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VocabularyList;\r\n\r\n\r\nVocabularyList.defaultProps = {\r\n    newList: []\r\n};\r\n","import React, {ChangeEvent, FC, ReactElement} from 'react';\r\nimport s from './FilterVocabulary.module.scss';\r\n\r\n\r\ntype PropTypes= {\r\n    filtred: (value: string) => void;\r\n    children?: never;\r\n}\r\n\r\n\r\nconst FilterVocabulary:FC<PropTypes>=({filtred}:PropTypes):ReactElement=> {\r\n    const onChangeFilter=({target}:ChangeEvent<HTMLInputElement>)=>filtred(target.value);\r\n\r\n    return (\r\n        <div className={s.findWord}>\r\n            <p className={s.filterTitle}>Find word:</p>\r\n            <input\r\n                type=\"text\"\r\n                onChange={onChangeFilter}\r\n                className={s.filterInput}\r\n                placeholder=\"Search...\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilterVocabulary;\r\n\r\nFilterVocabulary.defaultProps = {\r\n    filtred: () => {\r\n    }\r\n};\r\n","import React, {ChangeEvent, FC, FormEvent, ReactElement, useState} from 'react';\r\n\r\n\r\nimport s from './VocabularyForm.module.scss';\r\n\r\ninterface data {\r\n    word?: string;\r\n    translate?: string;\r\n}\r\n\r\ntype PropTypes = {\r\n    postWord: ({word, translate}: data) => void;\r\n    children?: never;\r\n}\r\n\r\n\r\nconst VocabularyForm: FC<PropTypes> = ({postWord}: PropTypes): ReactElement => {\r\n    const [word, setWord] = useState<string>('');\r\n    const [translate, setTranslate] = useState<string>('');\r\n\r\n    const updateWord = ({target}: ChangeEvent<HTMLInputElement>) => setWord(target.value);\r\n    const updateTranslate = ({target}: ChangeEvent<HTMLInputElement>) => setTranslate(target.value);\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        postWord({word, translate});\r\n        setWord('');\r\n        setTranslate('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit} className={s.form}>\r\n                <input\r\n                    className={s.form__input}\r\n                    type=\"text\"\r\n                    value={word}\r\n                    onChange={updateWord}\r\n                    name=\"word\"\r\n                    placeholder=\"word\"\r\n                />\r\n\r\n                <button type=\"submit\" className={s.form__btn}>\r\n                    Add Word\r\n                </button>\r\n                <input\r\n                    className={s.form__input}\r\n                    type=\"text\"\r\n                    value={translate}\r\n                    onChange={updateTranslate}\r\n                    name=\"translate\"\r\n                    placeholder=\"translate\"\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VocabularyForm;\r\n\r\n\r\nVocabularyForm.defaultProps = {\r\n    postWord: () => {\r\n    }\r\n};\r\n","import React, {FC, ReactElement, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport {useAppDispatch} from '../../redux/store'\r\nimport createArray from '../../helpers/createArray'\r\nimport screen from \"../../helpers/breakpoints\";\r\n\r\nimport vocabularyOperation from '../../redux/Vocabulary/vocabularyOperation';\r\nimport vocabularyActions from \"../../redux/Vocabulary/vocabularyActions\";\r\nimport vocabularySelectors from '../../redux/Vocabulary/vocabularySelectors';\r\nimport VocabularyList from '../../components/VocabularyList/VocabularyList';\r\nimport FilterVocabulary from '../../components/FilterVocabulary/FilterVocabulary';\r\nimport VocabularyForm from '../../components/VocabularyForm/VocabularyForm';\r\nimport {toast, ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport {addWord, content} from '../../types/types'\r\n\r\nimport s from './VocabularyView.module.css';\r\n\r\nconst VocabularyView: FC = (): ReactElement => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const typeDevice: string = screen();\r\n    const isMobile: boolean = typeDevice === 'mobile';\r\n\r\n    const words: content[] = useSelector(vocabularySelectors.getWords);\r\n\r\n    const list: content[] = useSelector(vocabularySelectors.getWordList);\r\n    const newList: content[] = isMobile ? createArray(list, 10) : createArray(list, 20);\r\n\r\n    useEffect(() => {\r\n        if (words.length === 0) dispatch(vocabularyOperation.fetchWords());\r\n    }, []);\r\n\r\n\r\n    const isWords: number = words.length;\r\n    const isShowFindWords: boolean = isWords >= 2;\r\n    const isShowWordList: boolean = isWords !== 0;\r\n\r\n    const postWord = (data: addWord) => {\r\n        if (!data.word || !data.translate) {\r\n            toast('Empty fields! Check word and translate!');\r\n            return;\r\n        }\r\n        const isWord = words.find(el => el.word === data.word);\r\n        !isWord ? dispatch(vocabularyOperation.postWord(data)) : toast('Word exist in your vocabulary');\r\n    }\r\n\r\n    const filtred = (value: string) => dispatch(vocabularyActions.changeFilter(value));\r\n    const removeWords = (id: string) => dispatch(vocabularyOperation.removeWord(id));\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer/>\r\n            <VocabularyForm postWord={postWord}/>\r\n            <CSSTransition\r\n                in={isShowFindWords}\r\n                timeout={250}\r\n                unmountOnExit\r\n                classNames={s}\r\n            >\r\n                <FilterVocabulary filtred={filtred}/>\r\n            </CSSTransition>\r\n\r\n            {isShowWordList && <VocabularyList removeWords={removeWords} newList={newList}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VocabularyView;\r\n\r\n\r\n"],"sourceRoot":""}